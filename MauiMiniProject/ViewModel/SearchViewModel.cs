using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MauiMiniProject.Model;
using Newtonsoft.Json;
using System.IO;
using MauiMiniProject.Services;

namespace MauiMiniProject.ViewModel;

public partial class SearchViewModel : ObservableObject
{
    private readonly Iservice _dataService;

    [ObservableProperty]
    string c_name = "";

    [ObservableProperty]
    string errorMessage = "";

    [ObservableProperty]
    bool isErrorVisible = false;

    [ObservableProperty]
    ObservableCollection<Courses> searchcourse = new ObservableCollection<Courses>();

    [ObservableProperty]
    ObservableCollection<Courses> allCourses = new ObservableCollection<Courses>();

    public SearchViewModel() { } // Constructor ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ XAML ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ

    public SearchViewModel(Iservice dataService)
    {
        System.Diagnostics.Debug.WriteLine($"[DEBUG] SID ‡πÄ‡∏ä‡πá‡∏Ñ: {dataService.Sid}");
        _dataService = dataService;
        LoadDataAsync();
    }

    // üìÇ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å student.json ‡πÑ‡∏õ‡∏ó‡∏µ‡πà AppDataDirectory
    async Task<string> GetStudentJsonPath()
    {
        string path = Path.Combine(FileSystem.AppDataDirectory, "student.json");

        if (!File.Exists(path))
        {
            try
            {
                using var stream = await FileSystem.OpenAppPackageFileAsync("student.json");
                using var reader = new StreamReader(stream);
                string content = await reader.ReadToEndAsync();
                File.WriteAllText(path, content);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[ERROR] ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å JSON ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {ex.Message}");
            }
        }

        return path;
    }

    // üìñ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student.json ‡∏à‡∏≤‡∏Å AppDataDirectory
    async Task<List<Student>> ReadStudentJsonAsync()
    {
        try
        {
            var path = Path.Combine(FileSystem.AppDataDirectory, "student.json");

            if (!File.Exists(path))
            {
                System.Diagnostics.Debug.WriteLine("[WARNING] ‡πÑ‡∏°‡πà‡∏û‡∏ö student.json ‡πÉ‡∏ô AppDataDirectory, ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å AppPackage ‡πÅ‡∏ó‡∏ô");
                using var stream = await FileSystem.OpenAppPackageFileAsync("student.json");
                using var reader = new StreamReader(stream);
                var contents = await reader.ReadToEndAsync();
                return Student.FromJson(contents);
            }

            var json = await File.ReadAllTextAsync(path);
            var students = Student.FromJson(json);
            System.Diagnostics.Debug.WriteLine($"[JSON] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: {students.Count} ‡∏Ñ‡∏ô");
            return students;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[ERROR] ‡πÇ‡∏´‡∏•‡∏î JSON ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {ex.Message}");
            return new List<Student>();
        }
    }


    // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• student.json ‡πÑ‡∏õ‡∏ó‡∏µ‡πà AppDataDirectory
    async Task SaveStudentJsonAsync(List<Student> students)
    {
        try
        {
            string path = await GetStudentJsonPath();
            var json = JsonConvert.SerializeObject(students, Formatting.Indented);
            await File.WriteAllTextAsync(path, json);
            System.Diagnostics.Debug.WriteLine("[JSON] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[ERROR] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {ex.Message}");
        }
    }

    // üìñ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• courses.json
    async Task<List<Courses>> ReadJsonAsync()
    {
        try
        {
            using var stream = await FileSystem.OpenAppPackageFileAsync("courses.json");
            using var reader = new StreamReader(stream);
            var contents = await reader.ReadToEndAsync();
            List<Courses> course = Courses.FromJson(contents);
            System.Diagnostics.Debug.WriteLine($"[JSON] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {course.Count} ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤");
            return course;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[ERROR] ‡πÇ‡∏´‡∏•‡∏î JSON ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {ex.Message}");
            return new List<Courses>();
        }
    }

    // üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    async Task LoadDataAsync()
    {
        var jsonCourses = await ReadJsonAsync();
        MainThread.BeginInvokeOnMainThread(() =>
        {
            allCourses.Clear();
            foreach (var course in jsonCourses)
            {
                allCourses.Add(course);
            }

            searchcourse.Clear();
            foreach (var course in allCourses)
            {
                searchcourse.Add(course);
            }
        });
    }

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
    [RelayCommand]
    async Task Search()
    {
        if (string.IsNullOrEmpty(C_name))
        {
            searchcourse.Clear();
            foreach (var course in allCourses)
            {
                searchcourse.Add(course);
            }
            return;
        }

        var filteredCourses = allCourses
            .Where(c => c.Name.Trim().ToLower().StartsWith(C_name.Trim().ToLower()))
            .ToList();

        if (filteredCourses.Any())
        {
            searchcourse.Clear();
            foreach (var course in filteredCourses)
            {
                searchcourse.Add(course);
            }
        }
        else
        {
            ErrorMessage = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤";
            IsErrorVisible = true;
        }
    }

    // üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤
    [RelayCommand]
    async Task Register(Courses course)
    {
        System.Diagnostics.Debug.WriteLine("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô");
        System.Diagnostics.Debug.WriteLine($"SID ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {_dataService.Sid}");

        var sid = _dataService.Sid;
        System.Diagnostics.Debug.WriteLine($"[DEBUG] SID ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {sid}");
        var students = await ReadStudentJsonAsync();

        System.Diagnostics.Debug.WriteLine($"[JSON] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: {students.Count} ‡∏Ñ‡∏ô");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ sid ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô student.json ‡πÑ‡∏´‡∏°
        foreach (var studentItem in students)  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô studentItem
        {
            System.Diagnostics.Debug.WriteLine($"[DEBUG] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö student: Sid={studentItem.Sid}");
        }

        var foundStudent = students.FirstOrDefault(s => s.Sid == sid);  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô foundStudent
        if (foundStudent == null)
        {
            System.Diagnostics.Debug.WriteLine($"[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ SID: {sid}");
            return;
        }

        System.Diagnostics.Debug.WriteLine($"[SUCCESS] ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ SID: {sid}");

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        var yearData = foundStudent.Year.FirstOrDefault();
        if (yearData != null)
        {
            // ‡∏´‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏ó‡∏µ‡πà 3
            var term3Courses = yearData.CoursesYear.FirstOrDefault(c => c.RegisteredTerm3 != null);
            if (term3Courses != null)
            {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                var courseExists = term3Courses.RegisteredTerm3.Any(c => c.Cid == course.Cid.ToString());
                if (!courseExists)
                {
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏ô‡πÄ‡∏ó‡∏≠‡∏° 3
                    term3Courses.RegisteredTerm3.Add(new RegisteredTerm { Cid = course.Cid.ToString() });

                    System.Diagnostics.Debug.WriteLine($"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤ {course.Name} ‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏ó‡∏≠‡∏° 3");

                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
                    await SaveStudentJsonAsync(students);

                    System.Diagnostics.Debug.WriteLine("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                }
                else
                {
                    // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    System.Diagnostics.Debug.WriteLine($"‡∏ß‡∏¥‡∏ä‡∏≤ {course.Name} ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏ó‡∏≠‡∏° 3");
                    ErrorMessage = $"‡∏ß‡∏¥‡∏ä‡∏≤ {course.Name} ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏ó‡∏≠‡∏° 3";
                    IsErrorVisible = true;
                }
            }
            else
            {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏≠‡∏° 3
                System.Diagnostics.Debug.WriteLine("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏≠‡∏° 3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ô‡∏µ‡πâ");
                ErrorMessage = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏≠‡∏° 3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ô‡∏µ‡πâ";
                IsErrorVisible = true;
            }
        }
        else
        {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
            System.Diagnostics.Debug.WriteLine("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤");
            ErrorMessage = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ô‡∏µ‡πâ";
            IsErrorVisible = true;
        }
    }


}
